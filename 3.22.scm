(define (make-queue)
    (let ((front-ptr '())(rear-ptr '()))
        (define (set-front-ptr! item)
            (set! front-ptr item))
        (define (set-rear-ptr! item)
            (set! rear-ptr item))
        (define empty-queue?
            (null? front-ptr))
        (define front-queue
            (if (empty-queue?) 
                (error "front-queue called with an empty queue")
                (car front-ptr)))
        (define (insert-queue! item)
            (cond ((empty-queue?) (set-front-ptr! item)
                                (set-rear-ptr! item))
                    (else (set-cdr! rear-ptr item)
                            (set-rear-ptr! item))))
        (define (delete-queque!)
            (cond ((empty-queue?)
                        (error "empty queue! no such item"))
                (else (set-front-ptr! (cdr front-ptr)))))
        (define (dispatch m)
            (cond ((eq? m 'empty-queue?) empty-queue?)
                ((eq? m 'front-queue) front-queue)
                ((eq? m 'insert-queue!) insert-queue!)
                ((eq? m 'delete-queque!) delete-queque!)
                (else (error "undefined operation!"))))
    dispatch))
